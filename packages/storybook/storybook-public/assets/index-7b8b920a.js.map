{"version":3,"file":"index-7b8b920a.js","sources":["../../../core/src/keys.ts","../../../core/src/selectors.ts","../../../core/src/index.ts","../../../react/src/index.tsx","../../../../node_modules/@tanstack/react-table/node_modules/@tanstack/table-core/build/lib/index.mjs","../../../../node_modules/@tanstack/react-table/build/lib/index.mjs"],"sourcesContent":["export enum Keys {\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Shift = 'Shift',\n  Control = 'Control',\n  Home = 'Home',\n  End = 'End',\n  /** Page Keys */\n  PageUp = 'PageUp',\n  PageDown = 'PageDown',\n  /** Arrow Keys */\n  ArrowLeft = 'ArrowLeft',\n  ArrowUp = 'ArrowUp',\n  ArrowRight = 'ArrowRight',\n  ArrowDown = 'ArrowDown',\n  F2 = 'F2',\n}","export const Selectors = {\n  Cell: '[role=\"cell\"],[role=\"gridcell\"],[role=\"columnheader\"],[role=\"rowheader\"],td,th',\n  Row: '[role=\"row\"],tr',\n  RowGroup: '[role=\"rowgroup\"],thead,tbody,tfoot',\n  /** Selector from here: https://github.com/Shopify/polaris/blob/main/polaris-react/src/utilities/focus.ts#L10 */\n  Focusable:\n    // 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled=\"true\"]):not([tabindex=\"-1\"]):not(:disabled),*[tabindex]:not([tabindex=\"-1\"])',\n    'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled=\"true\"]):not([tabindex=\"-1\"]):not(:disabled),*[tabindex]',\n} as const;\n","import { Keys } from './keys';\nimport { Selectors } from './selectors';\n\ntype FocusableElement = HTMLElement | SVGElement;\n\nexport type Config =\n  | {\n      selectors?: Partial<typeof Selectors>;\n      /** How many rows to move when pressing page up/down - Default goes to first/last row */\n      pageUpDown?: number;\n      debug?: boolean;\n    }\n  | undefined;\n\nexport class DataGridNav {\n  private selectors: Record<keyof typeof Selectors, string>;\n  readonly pageUpDown: number | undefined;\n  private keys: string[] = [];\n  private disabled: boolean;\n  readonly debug: boolean;\n\n  constructor(config: Config = {}) {\n    const { selectors = {}, pageUpDown, debug = false } = config;\n    this.selectors = { ...Selectors, ...selectors };\n    this.pageUpDown = pageUpDown;\n    this.keys = [];\n    this.debug = debug;\n    this.disabled = false;\n  }\n\n  private debugLog = (functionName: string, message: string) => {\n    if (this.debug) console.info(`[${functionName}]: ${message}`);\n  };\n\n  public disable() {\n    this.disabled = true;\n  }\n\n  public enable() {\n    this.disabled = false;\n  }\n\n  private isFocusable(el: Element): el is FocusableElement {\n    return el instanceof HTMLElement || el instanceof SVGElement;\n  }\n\n  public tableKeyUp() {\n    // TODO: have a cleanup as user can press key\n    //  and then move to another tab, and get back to the same tab\n    // so this will not be empty (the bug exists with .pop)\n    this.keys = [];\n  }\n\n  public tableKeyDown(e: KeyboardEvent) {\n    this.debugLog('tableKeyDown', `Key pressed: ${e.key}`);\n    if (this.disabled) {\n      this.debugLog('tableKeyDown', 'interaction is disabled');\n      return;\n    }\n    /**\n     * Avoid page scrolling etc.\n     * Enable default behavior for:\n     * Tab, Shift + Tab\n     * TODO: Actually it will be better to just prevent\n     * in ArrowKeys and PageKeys maybe?\n     * Or should the consumer stop propagation?!\n     * Cannot work with preventDefault as it will\n     * first capture the event from an input in cell for example\n     */\n    if (e.key !== 'Tab' && e.key !== 'Shift') {\n      // e.preventDefault();\n    }\n\n    /**\n     * Add key to the stack if it's\n     * not the same with the last (long press)\n     */\n    if (this.keys.length === 0 || this.keys[this.keys.length - 1] !== e.key) {\n      this.keys.push(e.key);\n    }\n\n    /**\n     * Need to check if we are inside a grid cell\n     * or not to enable/disable Grid Navigation\n     */\n    if (!(e.target instanceof Element)) return;\n    const cell = e.target.parentElement?.closest(\n      `${this.selectors.Cell},${this.selectors.Row}`\n    );\n\n    if (!cell) {\n      this.debugLog('tableKeyDown', 'cell not found');\n      return;\n    }\n\n    if (cell.matches(this.selectors.Cell)) {\n      this.debugLog('tableKeyDown', 'event captured in cell');\n      this.cellNavigation(e);\n    } else {\n      this.debugLog('tableKeyDown', 'event captured in cell');\n      this.gridNavigation(e);\n    }\n  }\n\n  public cellNavigation(e: KeyboardEvent) {\n    if (!(e.target instanceof Element)) return;\n\n    /**\n     * Keys: Escape\n     * Restore grid navigation\n     */\n    if (e.key === Keys.Escape) {\n      const cell = e.target.closest(this.selectors.Cell);\n      if (cell && this.isFocusable(cell)) {\n        cell.focus();\n        return;\n      }\n    }\n\n    /**\n     * Keys: ArrowRight, ArrowDown\n     * Move to the next focusable cell, or the first one\n     */\n    if (e.key === Keys.ArrowRight || e.key === Keys.ArrowDown) {\n      const cell = e.target.closest(this.selectors.Cell);\n      if (!cell) {\n        this.debugLog('cellNavigation', 'cell not found');\n        return;\n      }\n\n      const focusableWidgets = [\n        ...cell.querySelectorAll(this.selectors.Focusable),\n      ];\n\n      const widgetIdx = focusableWidgets.findIndex((el) => el === e.target);\n\n      const nextFocusable =\n        widgetIdx === focusableWidgets.length - 1 ? 0 : widgetIdx + 1;\n      const widgetToFocus = focusableWidgets[nextFocusable];\n      if (this.isFocusable(widgetToFocus)) {\n        widgetToFocus.focus();\n      }\n\n      return;\n    }\n\n    /**\n     * Keys: ArrowLeft, ArrowUp\n     * Move to the previous focusable cell, or the last one\n     */\n    if (e.key === Keys.ArrowLeft || e.key === Keys.ArrowUp) {\n      const cell = e.target.closest(this.selectors.Cell);\n\n      if (!cell) {\n        this.debugLog('cellNavigation', 'cell not found');\n        return;\n      }\n\n      const focusableWidgets = [\n        ...cell.querySelectorAll(this.selectors.Focusable),\n      ];\n\n      const widgetIdx = focusableWidgets.findIndex((el) => el === e.target);\n\n      const previousFocusable =\n        widgetIdx === 0 ? focusableWidgets.length - 1 : widgetIdx - 1;\n      const widgetToFocus = focusableWidgets[previousFocusable];\n      if (this.isFocusable(widgetToFocus)) {\n        widgetToFocus.focus();\n      }\n\n      return;\n    }\n  }\n\n  public gridNavigation(e: KeyboardEvent) {\n    const { target } = e;\n    if (!(e.target instanceof Element)) return;\n    if (!(target instanceof Element)) return;\n\n    if (this.keys.length === 1) {\n      /**\n       * Keys: Enter\n       * Should move focus inside the cell to the first focusable element:\n       * https://www.w3.org/WAI/ARIA/apg/patterns/grid/#gridNav_inside\n       */\n      if (e.key === Keys.Enter) {\n        const cell = e.target.querySelector(this.selectors.Focusable);\n        if (cell && this.isFocusable(cell)) {\n          cell.focus();\n        }\n      }\n\n      /**\n       * Keys: ArrowLeft, ArrowRight\n       * Should move focus to the next/previous cell\n       */\n      if (e.key === Keys.ArrowLeft || e.key === Keys.ArrowRight) {\n        const direction = e.key === Keys.ArrowLeft ? 'prev' : 'next';\n        // Get the closest cell we are currently in\n        const cell = e.target.closest(this.selectors.Cell);\n\n        if (cell && cell instanceof Element) {\n          const closeFocusable = this.findUntil(\n            direction,\n            cell,\n            this.selectors.Cell\n          );\n          if (closeFocusable) {\n            closeFocusable.focus();\n          }\n        }\n      }\n\n      /**\n       * Keys: Up,Down\n       * Should move focus to the same column of the next/previous row\n       */\n      if (e.key === Keys.ArrowDown || e.key === Keys.ArrowUp) {\n        this.verticalCellNavigation(e);\n        return;\n      }\n\n      /**\n       * Keys: PageUp, PageDown\n       * Should move focus to the first/last row\n       * or a predefined number of rows if user provides a value\n       */\n      if (e.key === Keys.PageUp || e.key === Keys.PageDown) {\n        this.pageCellNavigation(e);\n        return;\n      }\n\n      /**\n       * Keys: Home, End\n       * Should move focus to the first/last cell of the current row\n       */\n      if (e.key === Keys.Home || e.key === Keys.End) {\n        const row = e.target.closest(this.selectors.Row) as Element;\n        const rowChildren = [...(row?.children || [])];\n        if (e.key === 'End') rowChildren.reverse();\n        this.focusOnFirstCell(rowChildren);\n      }\n    } else {\n      /**\n       * Keys: Control + Home, Control + End\n       * Should move focus to the first/last cell of the first/last row\n       */\n      const [firstKey, secondKey] = this.keys;\n      if (\n        firstKey === 'Control' &&\n        (secondKey === Keys.Home || secondKey === Keys.End)\n      ) {\n        const row = e.target.closest(this.selectors.Row) as Element;\n        const siblings = row.parentElement?.children;\n\n        if (!siblings) {\n          this.debugLog('cellNavigation', 'siblings not found');\n          return;\n        }\n\n        const rowToFocus =\n          secondKey === Keys.Home ? siblings[0] : siblings[siblings.length - 1];\n        const rowChildren = [...(rowToFocus?.children || [])];\n        if (secondKey === Keys.End) rowChildren.reverse();\n        this.focusOnFirstCell(rowChildren);\n      }\n    }\n  }\n\n  private pageCellNavigation(e: KeyboardEvent) {\n    if (!(e.target instanceof Element)) return;\n    const row = e.target.closest(this.selectors.Row) as Element;\n    const cell = e.target.closest(this.selectors.Cell) as Element;\n\n    if (row && cell) {\n      const position = this.getColumnIndex(cell);\n\n      if (position === undefined) {\n        this.debugLog('cellNavigation', 'position not found');\n        return;\n      }\n\n      const direction = e.key === Keys.PageUp ? 'prev' : 'next';\n      const siblings = row.parentElement?.children;\n\n      if (!siblings) {\n        this.debugLog('cellNavigation', 'siblings not found');\n        return;\n      }\n\n      // If pageUpDown is defined, we should move that number of rows, or to the closest possible\n      let destinationRow: Element | ChildNode;\n      if (this.pageUpDown) {\n        const methodClbk =\n          direction === 'prev' ? 'previousSibling' : 'nextSibling';\n        let sibling = row[methodClbk];\n        if (sibling === null) return;\n\n        let lastVisitedSibling = sibling;\n\n        for (let i = 0; i < this.pageUpDown - 1 && sibling; i++) {\n          sibling = sibling[methodClbk];\n          if (sibling) {\n            lastVisitedSibling = sibling;\n          }\n        }\n        destinationRow = sibling ? sibling : lastVisitedSibling;\n      } else {\n        destinationRow =\n          direction === 'prev' ? siblings[0] : siblings[siblings.length - 1];\n      }\n      if (!destinationRow || !(destinationRow instanceof Element)) return;\n\n      const child = destinationRow.children[position];\n      if (child && this.isFocusable(child)) child.focus();\n    }\n  }\n\n  private verticalCellNavigation(e: KeyboardEvent) {\n    if (!(e.target instanceof Element)) return;\n    const row = e.target.closest(this.selectors.Row) as Element;\n    const cell = e.target.closest(this.selectors.Cell) as Element;\n\n    if (row && cell) {\n      const cellPosition = this.getColumnIndex(cell);\n      const rowPosition = this.getRowIndex(row);\n      this.debugLog('gridNavigation', `Initial row position: ${rowPosition}`);\n      this.debugLog('gridNavigation', `Initial cell position: ${cellPosition}`);\n      if (cellPosition === undefined || rowPosition === undefined) {\n        this.debugLog(\n          'verticalCellNavigation',\n          'row or cell position not found'\n        );\n        return;\n      }\n\n      const direction = e.key === Keys.ArrowUp ? 'prev' : 'next';\n\n      /** Find previous rowgroup and focus on the proper cell */\n      if (rowPosition === 0 && direction === 'prev') {\n        const currentRowGroup = row.parentElement?.closest(\n          this.selectors.RowGroup\n        );\n        const siblingRowGroups = [\n          ...(currentRowGroup?.parentElement?.children || []),\n        ];\n        const currentRowGroupIdx = siblingRowGroups.findIndex(\n          (el) => el === currentRowGroup\n        );\n        if (currentRowGroupIdx !== 0) {\n          const previousRowGroup = siblingRowGroups[currentRowGroupIdx - 1];\n          const rows = [\n            ...previousRowGroup.querySelectorAll(this.selectors.Row),\n          ];\n          const child = rows[rows.length - 1].children[cellPosition];\n          if (child && this.isFocusable(child)) child.focus();\n          return;\n        }\n      }\n\n      const siblingRows = [\n        ...(row.parentElement?.querySelectorAll(this.selectors.Row) || []),\n      ];\n      /** Find next rowgroup and focus on the proper cell */\n      if (rowPosition === siblingRows.length - 1 && direction === 'next') {\n        const currentRowGroup = row.parentElement?.closest(\n          this.selectors.RowGroup\n        );\n        const siblingRowGroups = [\n          ...(currentRowGroup?.parentElement?.children || []),\n        ];\n        const currentRowGroupIdx = siblingRowGroups.findIndex(\n          (el) => el === currentRowGroup\n        );\n        if (currentRowGroupIdx !== siblingRowGroups.length - 1) {\n          const nextRowGroup = siblingRowGroups[currentRowGroupIdx + 1];\n          const rows = [...nextRowGroup.querySelectorAll(this.selectors.Row)];\n          const child = rows[0].children[cellPosition];\n          if (child && this.isFocusable(child)) child.focus();\n          return;\n        }\n        return;\n      }\n\n      /** Navigation in the same rowgroup */\n      const destinationRow = this.findUntil(direction, row, this.selectors.Row);\n      if (!destinationRow) return;\n\n      const child = destinationRow.children[cellPosition];\n      if (child && this.isFocusable(child)) child.focus();\n    }\n  }\n\n  /**\n   * Sending a row `Element` and then the first cell will be focused.\n   *\n   * If you want to focus the last cell then the row children can be passed in\n   * reversed order\n   */\n  private focusOnFirstCell(el: Element[]) {\n    for (let i = 0; i < el.length; i++) {\n      const child = el[i];\n      if (this.isFocusable(child)) {\n        child.focus();\n        return;\n      }\n    }\n  }\n\n  /**\n   * Get the column index of a `cell` based on the first `row` parent.\n   * `cellIndex` could be used, but it's not supported in HTML tables.\n   */\n  private getColumnIndex(cell: Element) {\n    let position = 0;\n    const siblings = cell?.parentNode?.children;\n    if (!siblings) return undefined;\n\n    while (cell !== siblings[position] && siblings[position] !== undefined) {\n      position++;\n    }\n\n    // Cell position find was not possible, maybe should log here\n    if (siblings[position] === undefined) {\n      this.debugLog('getColumnIndex', 'position finding was not successful');\n      return undefined;\n    }\n    return position;\n  }\n\n  /**\n   * Get the row index of a `row` based\n   * on its sibling rows\n   */\n  private getRowIndex(row: Element) {\n    let position = 0;\n    const siblings = row?.parentNode?.children;\n    if (!siblings) return undefined;\n\n    while (row !== siblings[position] && siblings[position] !== undefined) {\n      position++;\n    }\n\n    // Cell position find was not possible\n    if (siblings[position] === undefined) {\n      this.debugLog('getRowIndex', 'position finding was not successful');\n      return undefined;\n    }\n    return position;\n  }\n\n  /**\n   * Equivalent to prevUntil/nextUntil in jQuery\n   * https://api.jquery.com/prevUntil/\n   */\n  private findUntil(\n    direction: 'next' | 'prev',\n    el: Element | ChildNode,\n    matchSelector: string,\n    exitSelector?: string\n  ): FocusableElement | null {\n    let element: ChildNode = el;\n    const method = direction === 'next' ? 'nextSibling' : 'previousSibling';\n\n    while (element[method]) {\n      const sibling = element[method];\n      if (!sibling) return null;\n      if (\n        exitSelector &&\n        sibling instanceof Element &&\n        sibling.matches(exitSelector)\n      ) {\n        return null;\n      }\n\n      if (sibling instanceof Element && sibling.matches(matchSelector)) {\n        return sibling as FocusableElement;\n      }\n\n      element = sibling;\n    }\n\n    return null;\n  }\n}\n","import { KeyboardEvent } from 'react';\nimport { DataGridNav, Config } from '@table-nav/core/src';\n\nexport function useTableNav(options: Config) {\n  const nav = new DataGridNav(options);\n\n  return {\n    listeners: {\n      onKeyDown: (e: KeyboardEvent) => nav.tableKeyDown(e as any),\n      onKeyUp: () => nav.tableKeyUp(),\n    },\n    tableNav: nav,\n  };\n}\n","/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction isNumberArray(d) {\n  return Array.isArray(d) && d.every(val => typeof val === 'number');\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column);\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column;\n}\n\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader == null ? void 0 : feature.createHeader(header, table));\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        var _left$map$filter, _right$map$filter;\n        const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n        const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n        const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n        }\n      }),\n      getCenterHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n        }\n      }),\n      getLeftHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n        var _left$map$filter2;\n        const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n        }\n      }),\n      getRightHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n        var _right$map$filter2;\n        const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n        }\n      }),\n      // Footer Groups\n\n      getFooterGroups: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFooterGroups: memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFooterGroups: memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => {\n          var _table$options$debugA7;\n          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n        }\n      }),\n      getRightFooterGroups: memo(() => [table.getRightHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => {\n          var _table$options$debugA8;\n          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n        }\n      }),\n      // Flat Headers\n\n      getFlatHeaders: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return headerGroups.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => {\n          var _table$options$debugA9;\n          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFlatHeaders: memo(() => [table.getLeftHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => {\n          var _table$options$debugA10;\n          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFlatHeaders: memo(() => [table.getCenterHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => {\n          var _table$options$debugA11;\n          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n        }\n      }),\n      getRightFlatHeaders: memo(() => [table.getRightHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => {\n          var _table$options$debugA12;\n          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n        }\n      }),\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders;\n          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => {\n          var _table$options$debugA13;\n          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n        }\n      }),\n      getLeftLeafHeaders: memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders2;\n          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => {\n          var _table$options$debugA14;\n          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n        }\n      }),\n      getRightLeafHeaders: memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders3;\n          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => {\n          var _table$options$debugA15;\n          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n        }\n      }),\n      getLeafHeaders: memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n        return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => {\n          var _table$options$debugA16;\n          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n        }\n      })\n    };\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\n//\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getSize: () => {\n        var _column$columnDef$min, _ref, _column$columnDef$max;\n        const columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n      },\n      getStart: position => {\n        const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        const index = columns.findIndex(d => d.id === column.id);\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n        return 0;\n      },\n      resetSize: () => {\n        table.setColumnSizing(_ref2 => {\n          let {\n            [column.id]: _,\n            ...rest\n          } = _ref2;\n          return rest;\n        });\n      },\n      getCanResize: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: (header, table) => {\n    return {\n      getSize: () => {\n        let sum = 0;\n        const recurse = header => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            var _header$column$getSiz;\n            sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n          }\n        };\n        recurse(header);\n        return sum;\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n        return 0;\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id);\n        const canResize = column == null ? void 0 : column.getCanResize();\n        return e => {\n          if (!column || !canResize) {\n            return;\n          }\n          e.persist == null ? void 0 : e.persist();\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n          const startSize = header.getSize();\n          const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n          const newColumnSizing = {};\n          const updateOffset = (eventType, clientXPos) => {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n            table.setColumnSizingInfo(old => {\n              var _old$startOffset, _old$startSize;\n              const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);\n              const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n              old.columnSizingStart.forEach(_ref3 => {\n                let [columnId, headerSize] = _ref3;\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage\n              };\n            });\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing\n              }));\n            }\n          };\n          const onMove = clientXPos => updateOffset('move', clientXPos);\n          const onEnd = clientXPos => {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: []\n            }));\n          };\n          const mouseEvents = {\n            moveHandler: e => onMove(e.clientX),\n            upHandler: e => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          const touchEvents = {\n            moveHandler: e => {\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onMove(e.touches[0].clientX);\n              return false;\n            },\n            upHandler: e => {\n              var _e$touches$;\n              document.removeEventListener('touchmove', touchEvents.moveHandler);\n              document.removeEventListener('touchend', touchEvents.upHandler);\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n            }\n          };\n          const passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n          if (isTouchStartEvent(e)) {\n            document.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n          } else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id\n          }));\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater),\n      setColumnSizingInfo: updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater),\n      resetColumnSizing: defaultState => {\n        var _table$initialState$c;\n        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n      },\n      resetHeaderSizeInfo: defaultState => {\n        var _table$initialState$c2;\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: () => {\n        var _table$getHeaderGroup, _table$getHeaderGroup2;\n        return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getHeaderGroup : 0;\n      },\n      getLeftTotalSize: () => {\n        var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n        return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getLeftHeaderG : 0;\n      },\n      getCenterTotalSize: () => {\n        var _table$getCenterHeade, _table$getCenterHeade2;\n        return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getCenterHeade : 0;\n      },\n      getRightTotalSize: () => {\n        var _table$getRightHeader, _table$getRightHeader2;\n        return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getRightHeader : 0;\n      }\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState$e, _table$initialState;\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n        if (!Object.keys(expanded).length) {\n          return false;\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false;\n        }\n\n        // They must all be expanded :shrug:\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          var _expanded;\n          const exists = old === true ? true : !!(old != null && old[row.id]);\n          let oldExpanded = {};\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true\n            };\n          }\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        var _table$options$getIsR;\n        const expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n      },\n      getCanExpand: () => {\n        var _table$options$getRow, _table$options$enable, _row$subRows;\n        return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue, _row$getValue$toStrin, _row$getValue$toStrin2;\n  const search = filterValue.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null ? void 0 : (_row$getValue$toStrin = _row$getValue.toString()) == null ? void 0 : (_row$getValue$toStrin2 = _row$getValue$toStrin.toLowerCase()) == null ? void 0 : _row$getValue$toStrin2.includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2, _row$getValue2$toStri;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null ? void 0 : (_row$getValue2$toStri = _row$getValue2.toString()) == null ? void 0 : _row$getValue2$toStri.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3, _row$getValue3$toStri;\n  return ((_row$getValue3 = row.getValue(columnId)) == null ? void 0 : (_row$getValue3$toStri = _row$getValue3.toString()) == null ? void 0 : _row$getValue3$toStri.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode, _table$getCoreRowMode2;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ? void 0 : (_table$getCoreRowMode2 = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode2.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n        return filterFns.weakEquals;\n      },\n      getFilterFn: () => {\n        var _table$options$filter, _table$options$filter2;\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn()\n        // @ts-ignore \n        : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: () => {\n        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n        return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: () => {\n        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n        return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n      },\n      getIsFiltered: () => column.getFilterIndex() > -1,\n      getFilterValue: () => {\n        var _table$getState$colum, _table$getState$colum2;\n        return (_table$getState$colum = table.getState().columnFilters) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum2.value;\n      },\n      getFilterIndex: () => {\n        var _table$getState$colum3, _table$getState$colum4;\n        return (_table$getState$colum3 = (_table$getState$colum4 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum4.findIndex(d => d.id === column.id)) != null ? _table$getState$colum3 : -1;\n      },\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn();\n          const previousfilter = old == null ? void 0 : old.find(d => d.id === column.id);\n          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined);\n\n          //\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            var _old$filter;\n            return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n          }\n          const newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n          if (previousfilter) {\n            var _old$map;\n            return (_old$map = old == null ? void 0 : old.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n              return d;\n            })) != null ? _old$map : [];\n          }\n          if (old != null && old.length) {\n            return [...old, newFilterObj];\n          }\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n        return column._getFacetedMinMaxValues();\n      }\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    };\n  },\n\n  createRow: (row, table) => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: table => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: () => {\n        var _table$options$filter3, _table$options$filter4;\n        const {\n          globalFilterFn: globalFilterFn\n        } = table.options;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn()\n        // @ts-ignore\n        : (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn];\n      },\n      setColumnFilters: updater => {\n        const leafColumns = table.getAllLeafColumns();\n        const updateFn = old => {\n          var _functionalUpdate;\n          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id);\n            if (column) {\n              const filterFn = column.getFilterFn();\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n            return true;\n          });\n        };\n        table.options.onColumnFiltersChange == null ? void 0 : table.options.onColumnFiltersChange(updateFn);\n      },\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange == null ? void 0 : table.options.onGlobalFilterChange(updater);\n      },\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: defaultState => {\n        var _table$initialState$c, _table$initialState;\n        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n      },\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n        }\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  const values = leafRows.map(row => row.getValue(columnId));\n  if (!isNumberArray(values)) {\n    return;\n  }\n  if (values.length === 1) {\n    return values[0];\n  }\n  const mid = Math.floor(values.length / 2);\n  const nums = values.sort((a, b) => a - b);\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n          return [...(old != null ? old : []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        var _table$getState$group;\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: () => {\n        var _table$getState$group2;\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        var _table$options$aggreg, _table$options$aggreg2;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState$g, _table$initialState;\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId];\n        }\n        const column = table.getColumn(columnId);\n        if (!(column != null && column.columnDef.getGroupingValue)) {\n          return row.getValue(columnId);\n        }\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\n        return row._groupingValuesCache[columnId];\n      },\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => {\n        var _row$subRows;\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater),\n      resetColumnOrder: defaultState => {\n        var _table$initialState$c;\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = [];\n\n        // If there is no order, return the normal columns\n        if (!(columnOrder != null && columnOrder.length)) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder];\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns];\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n        return orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn'\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      })\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst Pagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetPageIndex: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater = old => {\n          let newState = functionalUpdate(updater, old);\n          return newState;\n        };\n        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n      },\n      resetPagination: defaultState => {\n        var _table$initialState$p;\n        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex);\n          const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n          return {\n            ...old,\n            pageIndex\n          };\n        });\n      },\n      resetPageIndex: defaultState => {\n        var _table$initialState$p2, _table$initialState, _table$initialState$p3;\n        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null ? void 0 : (_table$initialState$p3 = _table$initialState.pagination) == null ? void 0 : _table$initialState$p3.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n      },\n      resetPageSize: defaultState => {\n        var _table$initialState$p4, _table$initialState2, _table$initialState2$;\n        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p4 = (_table$initialState2 = table.initialState) == null ? void 0 : (_table$initialState2$ = _table$initialState2.pagination) == null ? void 0 : _table$initialState2$.pageSize) != null ? _table$initialState$p4 : defaultPageSize);\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          const topRowIndex = old.pageSize * old.pageIndex;\n          const pageIndex = Math.floor(topRowIndex / pageSize);\n          return {\n            ...old,\n            pageIndex,\n            pageSize\n          };\n        });\n      },\n      setPageCount: updater => table.setPagination(old => {\n        var _table$options$pageCo;\n        let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount);\n        }\n        return {\n          ...old,\n          pageCount: newPageCount\n        };\n      }),\n      getPageOptions: memo(() => [table.getPageCount()], pageCount => {\n        let pageOptions = [];\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n        }\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n      getCanNextPage: () => {\n        const {\n          pageIndex\n        } = table.getState().pagination;\n        const pageCount = table.getPageCount();\n        if (pageCount === -1) {\n          return true;\n        }\n        if (pageCount === 0) {\n          return false;\n        }\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1);\n      },\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n        return table._getPaginationRowModel();\n      },\n      getPageCount: () => {\n        var _table$options$pageCo2;\n        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n};\n\n//\n\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      pin: position => {\n        const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n        table.setColumnPinning(old => {\n          var _old$left3, _old$right3;\n          if (position === 'right') {\n            var _old$left, _old$right;\n            return {\n              left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n              right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n            };\n          }\n          if (position === 'left') {\n            var _old$left2, _old$right2;\n            return {\n              left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n              right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n            };\n          }\n          return {\n            left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        });\n      },\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns();\n        return leafColumns.some(d => {\n          var _d$columnDef$enablePi, _table$options$enable;\n          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n        });\n      },\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id);\n        const {\n          left,\n          right\n        } = table.getState().columnPinning;\n        const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n        const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: () => {\n        var _table$getState$colum, _table$getState$colum2, _table$getState$colum3;\n        const position = column.getIsPinned();\n        return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null ? void 0 : (_table$getState$colum3 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum3.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getCenterVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allCells.filter(d => !leftAndRight.includes(d.column.id));\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getLeftVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n        const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      }),\n      getRightVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n        const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'right'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnPinning: updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater),\n      resetColumnPinning: defaultState => {\n        var _table$initialState$c, _table$initialState;\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: position => {\n        var _pinningState$positio;\n        const pinningState = table.getState().columnPinning;\n        if (!position) {\n          var _pinningState$left, _pinningState$right;\n          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n        }\n        return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n      },\n      getLeftLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n        return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n        }\n      }),\n      getRightLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n        return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n        }\n      }),\n      getCenterLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allColumns.filter(d => !leftAndRight.includes(d.id));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n        }\n      })\n    };\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater),\n      resetRowSelection: defaultState => {\n        var _table$initialState$r;\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = {\n            ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        var _table$getState$rowSe;\n        const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n          if (isSelected === value) {\n            return old;\n          }\n          const selectedRowIds = {\n            ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        var _table$options$enable;\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: () => {\n        var _table$options$enable2;\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: () => {\n        var _table$options$enable3;\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          var _target;\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n  const row = table.getRow(id);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n  return false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n        for (const row of firstRows) {\n          const value = row == null ? void 0 : row.getValue(column.id);\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime;\n          }\n          if (typeof value === 'string') {\n            isString = true;\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric;\n            }\n          }\n        }\n        if (isString) {\n          return sortingFns.text;\n        }\n        return sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n        return 'desc';\n      },\n      getSortingFn: () => {\n        var _table$options$sortin, _table$options$sortin2;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n          const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n          let newSorting = [];\n\n          // What should we do with this sort action?\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n          // Multi-mode\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }];\n            // Take latest n columns\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc\n                };\n              }\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        var _ref, _column$columnDef$sor;\n        const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        var _table$options$enable, _table$options$enable2;\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n        // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        var _column$columnDef$ena, _table$options$enable3;\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        var _ref2, _column$columnDef$ena2;\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        var _table$getState$sorti;\n        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti2, _table$getState$sorti3;\n        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater),\n      resetSorting: defaultState => {\n        var _table$initialState$s, _table$initialState;\n        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\n//\n\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value != null ? value : !column.getIsVisible()\n          }));\n        }\n      },\n      getIsVisible: () => {\n        var _table$getState$colum, _table$getState$colum2;\n        return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;\n      },\n      getCanHide: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n      },\n      getToggleVisibilityHandler: () => {\n        return e => {\n          column.toggleVisibility == null ? void 0 : column.toggleVisibility(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      _getAllVisibleCells: memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n        return cells.filter(cell => cell.column.getIsVisible());\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getVisibleCells: memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, {\n        key,\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns()),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns()),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns()),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns()),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns()),\n      setColumnVisibility: updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater),\n      resetColumnVisibility: defaultState => {\n        var _table$initialState$c;\n        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n      },\n      toggleAllColumnsVisible: value => {\n        var _value;\n        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n          ...obj,\n          [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n        }), {}));\n      },\n      getIsAllColumnsVisible: () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible())),\n      getIsSomeColumnsVisible: () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible()),\n      getToggleAllColumnsVisibilityHandler: () => {\n        return e => {\n          var _target;\n          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$initialState;\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n  let table = {\n    _features: features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null ? void 0 : table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`);\n        }\n        throw new Error();\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null ? void 0 : _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => {\n        var _table$options$debugA4;\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable == null ? void 0 : feature.createTable(table));\n  });\n  return table;\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: () => table.options.debugAll\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n  return cell;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => row.parentId ? table.getRow(row.parentId) : undefined,\n    getParentRows: () => {\n      let parentRows = [];\n      let currentRow = row;\n      while (true) {\n        const parentRow = currentRow.getParentRow();\n        if (!parentRow) break;\n        parentRows.push(parentRow);\n        currentRow = parentRow;\n      }\n      return parentRows.reverse();\n    },\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, table));\n  }\n  return row;\n};\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return new Map();\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    var _facetedRowModel$flat;\n    if (!facetedRowModel) return undefined;\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n    let facetedMinMaxValues = [firstValue, firstValue];\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (value < facetedMinMaxValues[0]) {\n          facetedMinMaxValues[0] = value;\n        } else if (value > facetedMinMaxValues[1]) {\n          facetedMinMaxValues[1] = value;\n        }\n      }\n    }\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = [...rows];\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n            if (aUndefined || bUndefined) {\n              return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          }\n\n          // This function should always return in ascending order\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\n\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isNumberArray, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.mjs.map\n","/**\n * react-table\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\n\n//\n\nfunction flexRender(Comp, props) {\n  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : Comp;\n}\nfunction isReactComponent(component) {\n  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n}\nfunction isClassComponent(component) {\n  return typeof component === 'function' && (() => {\n    const proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  })();\n}\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\nfunction useReactTable(options) {\n  // Compose in the generic options to the user options\n  const resolvedOptions = {\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    ...options\n  };\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable(resolvedOptions)\n  }));\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState);\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater);\n      options.onStateChange == null ? void 0 : options.onStateChange(updater);\n    }\n  }));\n  return tableRef.current;\n}\n\nexport { flexRender, useReactTable };\n//# sourceMappingURL=index.mjs.map\n"],"names":["Keys","Selectors","DataGridNav","config","functionName","message","selectors","pageUpDown","debug","el","e","cell","_a","focusableWidgets","widgetIdx","nextFocusable","widgetToFocus","previousFocusable","target","direction","closeFocusable","row","rowChildren","firstKey","secondKey","siblings","rowToFocus","position","destinationRow","methodClbk","sibling","lastVisitedSibling","i","child","cellPosition","rowPosition","currentRowGroup","siblingRowGroups","_b","currentRowGroupIdx","rows","siblingRows","_c","_d","_e","matchSelector","exitSelector","element","method","useTableNav","options","nav","functionalUpdate","updater","input","makeStateUpdater","key","instance","old","isFunction","d","isNumberArray","val","flattenBy","arr","getChildren","flat","recurse","subArr","item","children","memo","getDeps","fn","opts","deps","result","depTime","newDeps","dep","index","resultTime","depEndTime","resultEndTime","resultFpsPercentage","pad","str","num","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","accessorKey","id","accessorFn","originalRow","_result","column","_column$columns","_table$options$debugA","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","obj","feature","createHeader","_options$id","header","leafHeaders","recurseHeader","h","Headers","allColumns","left","right","_left$map$filter","_right$map$filter","leftColumns","columnId","rightColumns","centerColumns","buildHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","_right$map$filter2","_table$options$debugA4","headerGroups","_table$options$debugA5","_table$options$debugA6","_table$options$debugA7","_table$options$debugA8","headerGroup","_table$options$debugA9","_table$options$debugA10","_table$options$debugA11","_table$options$debugA12","flatHeaders","_header$subHeaders","_table$options$debugA13","_header$subHeaders2","_table$options$debugA14","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","columns","createHeaderGroup","headersToGroup","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","isPlaceholder","bottomHeaders","recurseHeadersForSpans","headers","colSpan","rowSpan","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","getDefaultColumnSizingInfoState","ColumnSizing","state","_column$columnDef$min","_column$columnDef$max","columnSize","prevSiblingColumn","_ref2","_","rest","_column$columnDef$ena","_table$options$enable","sum","_header$column$getSiz","prevSiblingHeader","canResize","isTouchStartEvent","startSize","columnSizingStart","clientX","newColumnSizing","updateOffset","eventType","clientXPos","_old$startOffset","_old$startSize","deltaOffset","deltaPercentage","_ref3","headerSize","onMove","onEnd","mouseEvents","touchEvents","_e$touches$","passiveIfSupported","passiveEventSupported","defaultState","_table$initialState$c","_table$initialState$c2","_table$getHeaderGroup","_table$getHeaderGroup2","_table$getLeftHeaderG","_table$getLeftHeaderG2","_table$getCenterHeade","_table$getCenterHeade2","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","Expanding","registered","queued","_table$options$autoRe","expanded","_table$initialState$e","_table$initialState","splitId","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","_table$options$getRow","_row$subRows","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","min","max","rowValue","unsafeMin","unsafeMax","parsedMin","parsedMax","temp","filterFns","Filters","_table$getCoreRowMode","_table$getCoreRowMode2","value","firstRow","_table$options$filter","_table$options$filter2","_table$options$enable2","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","filterFn","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_table$options$filter3","_table$options$filter4","globalFilterFn","updateFn","_functionalUpdate","filter","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","values","mid","nums","a","b","unique","uniqueCount","_columnId","aggregationFns","Grouping","props","_toString","_props$getValue","_table$getState$group","_table$getState$group2","canGroup","_table$options$aggreg","_table$options$aggreg2","_table$initialState$g","grouping","groupedColumnMode","nonGroupingColumns","col","g","Ordering","columnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","foundIndex","defaultPageIndex","defaultPageSize","getDefaultPaginationState","Pagination","safeUpdater","_table$initialState$p","pageIndex","maxPageIndex","_table$initialState$p2","_table$initialState$p3","_table$initialState$p4","_table$initialState2","_table$initialState2$","pageSize","topRowIndex","_table$options$pageCo","newPageCount","pageCount","pageOptions","_table$options$pageCo2","getDefaultPinningState","Pinning","columnIds","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","_d$columnDef$enablePi","leafColumnIds","isLeft","isRight","allCells","leftAndRight","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","RowSelection","_table$initialState$r","rowSelection","preGroupedFlatRows","resolvedValue","mutateRowIsSelected","rowModel","selectRowsFn","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","_table$getState$rowSe","totalSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","canSelect","_target","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","toString","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","bn","combo","sortingFns","Sorting","firstRows","isString","_table$options$sortin","_table$options$sortin2","desc","multi","nextSortingOrder","hasManualValue","existingSorting","existingIndex","newSorting","sortAction","nextDesc","_table$options$maxMul","_column$columnDef$sor","firstSortDirection","isSorted","_table$getState$sorti","columnSort","_table$getState$sorti2","_table$getState$sorti3","canSort","_table$initialState$s","Visibility","cells","makeVisibleColumnsMethod","getColumns","_value","features","createTable","_options$initialState","defaultOptions","mergeOptions","initialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","error","newOptions","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","columnDefs","recurseColumns","groupingColumnDef","flatColumns","acc","createCell","getRenderValue","_cell$getValue","createRow","original","rowIndex","subRows","parentId","parentRows","currentRow","parentRow","createColumnHelper","accessor","getCoreRowModel","data","accessRows","originalRows","_row$originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","getFilteredRowModel","columnFilters","globalFilter","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","filterRowsImpl","getExpandedRowModel","paginateExpandedRows","expandRows","expandedRows","handleRow","getPaginationRowModel","pagination","flatRows","rowsById","pageStart","pageEnd","paginatedRowModel","flexRender","Comp","isReactComponent","React.createElement","component","isClassComponent","isExoticComponent","proto","useReactTable","resolvedOptions","tableRef","React.useState","setState","prev"],"mappings":"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","x_google_ignoreList":[4,5]}